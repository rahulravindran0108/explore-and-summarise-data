}
twtList1$text<-CleanTweets(twtList1$text)
twtList1$text
wordcloud_base<-as.character(twtList1$text)
text<-sapply(wordcloud_base,function(x) x)
text.corpus<-Corpus(VectorSource(text))
text.corpus<-tm_map(text.corpus, function(x)removeWords(x,stopwords()))
wordcloud(text.corpus,min.freq = 1, scale=c(8,0.3),colors=brewer.pal(8, "Dark2"),  random.color= TRUE, random.order = FALSE, max.words = 20)
wordcloud(text.corpus,min.freq = 5, scale=c(8,0.3),colors=brewer.pal(8, "Dark2"),  random.color= TRUE, random.order = FALSE, max.words = 20)
twtList1$text<-iconv(twtList1$text, 'UTF-8', 'ASCII')
wordcloud_base<-as.character(twtList1$text)
text<-sapply(wordcloud_base,function(x) x)
text.corpus<-Corpus(VectorSource(text))
text.corpus<-tm_map(text.corpus, function(x)removeWords(x,stopwords()))
wordcloud(text.corpus,min.freq = 1, scale=c(8,0.3),colors=brewer.pal(8, "Dark2"),  random.color= TRUE, random.order = FALSE, max.words = 20)
wordcloud(text.corpus,min.freq = 5, scale=c(8,0.3),colors=brewer.pal(8, "Dark2"),  random.color= TRUE, random.order = FALSE, max.words = 50)
wordcloud(text.corpus,min.freq = 1, scale=c(8,0.3),colors=brewer.pal(8, "Dark2"),  random.color= TRUE, random.order = FALSE, max.words = 50)
twtList1$text
twList<-searchTwitter(searchString = "fifa15 cm",lang="en",n=500)
twList<-searchTwitter(searchString = "fifa15 cm",lang="en",n=500)
twtList1<- do.call("rbind",lapply(twList,as.data.frame))
twtList1$text<-CleanTweets(twtList1$text)
twtList1$text
wordcloud_base<-as.character(twtList1$text)
text<-sapply(wordcloud_base,function(x) x)
text.corpus<-Corpus(VectorSource(text))
text.corpus<-tm_map(text.corpus, function(x)removeWords(x,stopwords()))
text.corpus
tdm<-TermDocumentMatrix(text.corpus)
findFreqTerms(tdm,lowfreq = 5)
findFreqTerms(tdm,lowfreq = 2)
findFreqTerms(tdm,lowfreq = 1)
findAssocs(tdm,"tielmans")
findAssocs(tdm,"tielmans",0.2)
findAssocs(tdm,"tielmans",00)
findAssocs(tdm,"tielmans",0.5)
findAssocs(tdm,"tielemans",0.5)
findAssocs(tdm,"tielemans",0.2)
findAssocs(tdm,"tshibola",0.2)
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
library(Rgraphviz)
biocLite("Rgraphviz")
freq = findFreqTerms(tdm,lowfreq = 2)
freq
library(graph)
library(Rgraphviz)
plot(tdm, term = freq, corThreshold = 0.12, weighting = T)
tdm
tdm<-TermDocumentMatrix(twtList1$text)
tdm<-TermDocumentMatrix(as.character(twtList1$text))
tdm<-TermDocumentMatrix(text.corpus)
text.corpus
twtList1$text<-iconv(twtList1$text, 'UTF-8', 'ASCII')
twtList1$text
wordcloud_base<-as.character(twtList1$text,na.omit = T)
text<-sapply(wordcloud_base,function(x) x)
text.corpus<-Corpus(VectorSource(text))
text.corpus<-tm_map(text.corpus, function(x)removeWords(x,stopwords()))
tdm<-TermDocumentMatrix(text.corpus)
freq = findFreqTerms(tdm, lowfreq = 2)
freq
freq = findFreqTerms(tdm, lowfreq = 1)
freq
plot(tdm,freq,corThreshold = 0.12, weighting = T)
plot(tdm,freq,corThreshold = 0.5, weighting = T)
freq = findFreqTerms(tdm, lowfreq = 5)
freq
plot(tdm,freq,corThreshold = 0.5, weighting = T)
plot(tdm,freq,corThreshold = 0.12, weighting = T)
plot(tdm,freq,corThreshold = 0.1, weighting = T)
freq = findFreqTerms(tdm, lowfreq = 2)
plot(tdm,freq,corThreshold = 0.1, weighting = T)
freq = findFreqTerms(tdm, lowfreq = 10)
freq
plot(tdm,freq,corThreshold = 1.0, weighting = T)
plot(tdm,freq,corThreshold = 2.0, weighting = T)
freq = findFreqTerms(tdm, lowfreq = 1)
plot(tdm,freq,corThreshold = 2.0, weighting = T)
plot(tdm,freq,corThreshold = 1.0, weighting = T)
freq = findFreqTerms(tdm, lowfreq = 2)
plot(tdm,freq,corThreshold = 1.0, weighting = T)
plot(tdm,freq,corThreshold = 2.0, weighting = T)
freq = findFreqTerms(tdm, lowfreq = 5)
plot(tdm,freq,corThreshold = 1.0, weighting = T)
plot(tdm,freq,corThreshold = 0.1, weighting = T)
twList<-searchTwitter(searchString = "fifa15 cb",lang="en",n=500)
twtList1<- do.call("rbind",lapply(twList,as.data.frame)
)
twtList1$text
twtList1$text<-iconv(twtList1$text, 'UTF-8', 'ASCII')
twtList1$text
wordcloud_base<-as.character(twtList1$text, na.omit = T)
twList<-searchTwitter(searchString = "fifa15 cb",lang="en",n=500)
twtList1<- do.call("rbind",lapply(twList,as.data.frame))
twtList1$text<-CleanTweets(twtList1$text)
twtList1$text
wordcloud_base<-as.character(twtList1$text)
text<-sapply(wordcloud_base,function(x) x)
text.corpus<-Corpus(VectorSource(text))
text.corpus<-tm_map(text.corpus, function(x)removeWords(x,stopwords()))
tdm<-TermDocumentMatrix(text.corpus)
findFreqTerms(tdm,lowfreq = 5)
findFreqTerms(tdm,lowfreq = 2)
findFreqTerms(tdm,lowfreq = 1)
findFreqTerms(tdm,lowfreq = 2)
freq = findFreqTerms(tdm,lowfreq = 2)
plot(tdm,freq,corThreshold = 0.1, weighting = T)
plot(tdm,freq,corThreshold = 1.0, weighting = T)
plot(tdm,freq,corThreshold = 0.2, weighting = T)
freq = findFreqTerms(tdm,lowfreq = 10)
plot(tdm,freq,corThreshold = 0.2, weighting = T)
freq = findFreqTerms(tdm,lowfreq = 5)
plot(tdm,freq,corThreshold = 0.2, weighting = T)
freq = findFreqTerms(tdm,lowfreq = 3)
plot(tdm,freq,corThreshold = 0.2, weighting = T)
twtList1$text
wordcloud_base<-as.character(twtList1$text)
wordcloud_base
text<-sapply(wordcloud_base,function(x) x)
text
text.corpus<-Corpus(VectorSource(text))
tdm<-TermDocumentMatrix(tdm)
tdm<-TermDocumentMatrix(text.corpus)
freq = findFreqTerms(tdm,lowfreq = 2)
freq
freq = findFreqTerms(tdm,lowfreq = 5)
freq
freq = findFreqTerms(tdm,lowfreq = 3)
freq
findAssocs(tdm,"ashcroft5")
findAssocs(tdm,"ashcroft5"corlimit = 0.2)
findAssocs(tdm,"ashcroft5",corlimit = 0.2)
twtList1$text
findAssocs(tdm,"CUNNINGHAM",corlimit = 0.2)
findAssocs(tdm,"CUNNINGHAM_17",corlimit = 0.2)
findAssocs(tdm,"cunningham_17",corlimit = 0.2)
findAssocs(tdm,"browning",corlimit = 0.2)
setwd("~/Documents/data science-nanodegree/explore and summarise data")
library(ggplot2)
data <- read.csv("repdata_data_StormData.csv.bz2", header = TRUE, sep = ",",
colClasses = c("numeric", "character", "character", "character", "numeric",
"character", "character", "character", "numeric", "character", "character",
"character", "character", "numeric", "character", "character", "character",
"character", "numeric", "numeric", "character", "numeric", "numeric",
"numeric", "numeric", "character", "numeric", "character", "character",
"character", "character", "numeric", "numeric", "numeric", "numeric",
"character", "numeric"))
smallData <- data[data$FATALITIES > 0 | data$INJURIES > 0 | data$PROPDMG > 0 |
data$CROPDMG > 0, ]
convection <- c("?.*LIGHTING|LIGHTN|LIGNTNING|TORNADO|TORNDAO|WIND|TSTM|THUNDER|WND|HAIL|TURBULENCE|GUSTNADO?.*")
temperature <- c("?.*COLD|HEAT|WARM|TEMPERATURE|THERMIA?.*")
flood <- c("?.*FLOOD|RISING|STREAM FLD?.*")
marine <- c("?.*COASTAL|TSUNAMI|CURRENT|SWELLS|TIDE|WAVE|SEAS|SURF|HIGH WATER?.*")
cyclones <- c("?.*CYCLONE|HURRICANE|TYPHOON?.*")
winter <- c("?.*WINT|ICE|AVALAN|SLEET|SNOW|FREEZ|BLIZZ|FROST|GLAZE|MIXED?.*")
smallData[grepl(winter, smallData$EVTYPE, ignore.case = TRUE), "category"] = "Winter"
smallData[grepl(cyclones, smallData$EVTYPE, ignore.case = TRUE), "category"] = "Tropical Cyclones"
smallData[grepl(marine, smallData$EVTYPE, ignore.case = TRUE), "category"] = "Marine"
smallData[grepl(flood, smallData$EVTYPE, ignore.case = TRUE), "category"] = "Flood"
smallData[grepl(temperature, smallData$EVTYPE, ignore.case = TRUE), "category"] = "Extreme Temperatures"
smallData[grepl(convection, smallData$EVTYPE, ignore.case = TRUE), "category"] = "Convection"
smallData[is.na(smallData$category), "category"] = "Other"
smallData$propertydamageEXP = 1
smallData[grepl("h|H", smallData$PROPDMGEXP, ignore.case = TRUE), "propertydamageEXP"] = 100
smallData[grepl("k|K", smallData$PROPDMGEXP, ignore.case = TRUE), "propertydamageEXP"] = 1000
smallData[grepl("m|M", smallData$PROPDMGEXP, ignore.case = TRUE), "propertydamageEXP"] = 1e+06
smallData[grepl("b|B", smallData$PROPDMGEXP, ignore.case = TRUE), "propertydamageEXP"] = 1e+09
smallData$propertydamage = smallData$PROPDMG * smallData$propertydamageEXP
smallData$cropdamageEXP = 1
smallData[grepl("k|K", smallData$CROPDMGEXP, ignore.case = TRUE), "cropdamageEXP"] = 1000
smallData[grepl("m|M", smallData$CROPDMGEXP, ignore.case = TRUE), "cropdamageEXP"] = 1e+06
smallData[grepl("b|B", smallData$CROPDMGEXP, ignore.case = TRUE), "cropdamageEXP"] = 1e+09
smallData$cropdamage = smallData$CROPDMG * smallData$cropdamageEXP
county<-table(smallData$COUNTYNAME)
out=data.frame(item=names(unlist(county)),count=unlist(county)[],
stringsAsFactors=FALSE)
ggplot(out, aes(x=count)) + geom_histogram()
ggplot(out, aes(x=count)) + geom_histogram(binwidth=.5)
ggplot(out, aes(x=count)) + geom_histogram(binwidth=.3)
ggplot(out, aes(x=count)) + geom_histogram(binwidth=.9)
ggplot(out, aes(x=count)) + geom_histogram(binwidth=out$count)
ggplot(out, aes(x=count)) + geom_histogram(binwidth=2)
ggplot(out, aes(x=count)) + geom_histogram(binwidth=10)
ggplot(out, aes(x=count)) + geom_histogram(binwidth=50)
ggplot(out, aes(x=count)) + geom_histogram(binwidth=100)
ggplot(out, aes(x=count)) + geom_histogram(binwidth=200)
ggplot(out, aes(x=count)) + geom_histogram(binwidth=500)
ggplot(out, aes(x=count)) + geom_histogram(binwidth=200)
ggplot(dat, aes(x=out, colour=items)) + geom_density()
ggplot(out, aes(x=count, colour=items)) + geom_density()
ggplot(out, aes(x=count, colour=item)) + geom_density()
max(out)
max(out$count)
maxregions<-subset(out,out$count>100)
maxregions<-subset(out,out$count>1000)
maxregions
ggplot(out, aes(x=item, y=count)) + geom_boxplot()
mean(out$count)
ggplot(maxregions, aes(x=item, y=count)) + geom_boxplot()
maxregions<-subset(out,out$count>1500)
ggplot(maxregions, aes(x=item, y=count)) + geom_boxplot()
ggplot(dat, aes(x=count, colour=item)) +
geom_density()
ggplot(out, aes(x=count, colour=item)) +
geom_density()
ggplot(maxregions, aes(x=count, colour=item)) +
geom_density()
ggplot(maxregions, aes(x=count, colour=item)) +
geom_histogram()
ggplot(maxregions, aes(y=count, colour=item)) +
geom_histogram()
ggplot(maxregions, aes(x=count, fill=item)) +
geom_histogram(binwidth=.5, alpha=.5, position="identity")
ggplot(maxregions, aes(x=item, fill=count)) +
geom_histogram(binwidth=.5, alpha=.5, position="identity")
ggplot(maxregions, aes(x=count, colour=item)) + geom_density()
ggplot(out, aes(x=item, colour=item)) + geom_density()
ggplot(out, aes(x=items, colour=item)) +
geom_histogram()
ggplot(out, aes(x=item, colour=item)) +
geom_histogram()
ggplot(data = maxregions, aes(x=item, colour = item), y = count)+geom_bar(stat="identity") +
coord_flip()
ggplot(data = maxregions, aes(x=item, colour = item), y = count)
ggplot(data = maxregions, aes(x=item), y = count)
ggplot(maxregions, aes(x=item), y = count)
ggplot(maxregions, aes(x=item), y = count)+geom_bar(stat="identity")
ggplot(maxregions, aes(x=item), y = count)+geom_bar(stat="identity")
ggplot(maxregions, aes(x=item), y = count)+geon_histogram()+geom_bar(stat="identity")
ggplot(maxregions, aes(x=item), y = count)+geom_histogram()+geom_bar(stat="identity")
ggplot(maxregions, aes(x=item, y = count))+geom_bar(stat="identity")
ggplot(maxregions, aes(x=item, y = count, fill = count))+geom_bar(stat="identity")
ggplot(maxregions, aes(x=item, y = count, fill = count))+geom_bar(stat="identity")+xlab("County Names")+ylab("Number of weather events occurred")
ggplot(maxregions, aes(x=item, y = count, fill = count))+geom_bar(stat="identity")+xlab("County Names")+ylab("Number of weather events occurred")+legend("Larges number of events that have occurred in Countys")
ggplot(maxregions, aes(x=item, y = count, fill = count))+geom_bar(stat="identity")+xlab("County Names")+ylab("Number of weather events occurred")+title("Largest number of events that have occurred in Countys")
ggplot(maxregions, aes(x=item, y = count, fill = count))+geom_bar(stat="identity")+xlab("County Names")+ylab("Number of weather events occurred")+main("Largest number of events that have occurred in Countys")
ggplot(maxregions, aes(x=item, y = count, fill = count))+geom_bar(stat="identity")+xlab("County Names")+ylab("Number of weather events occurred")+ggtitle("Largest number of events that have occurred in Countys")
washington<-subset(smallData, COUNTYNAME == "WASHINGTON")
table(washington$category)
washington=data.frame(item=names(unlist(washington)),count=unlist(washington)[],
stringsAsFactors=FALSE)
washingotn
washington
washington<-subset(smallData, COUNTYNAME == "WASHINGTON")
washington<-table(washington$category)
washington<-data.frame(events=names(unlist(washington)), count = unlist(washington)[], stringsAsFactors = FALSE)
washington
ggplot(washington, aes(x=events, y = count, fill = count))+geom_bar(stat="identity")+xlab("Events")+ylab("Number of occurrences")+ggtitle("Most prominent Disaster in Washington")
washington<-subset(smallData, COUNTYNAME == "WASHINGTON" & FATALITIES > 0)
table(washington$category)
table(washington$EVTYPE)
ggplot(smallData, aes(x=category,y=FATALITIES))+geom_point(shape=1)
ggplot(smallData, aes(x=propertydamage,y=FATALITIES))+geom_point(shape=1)
ggplot(smallData, aes(x=INJURIES,y=FATALITIES))+geom_point(shape=1)
ggplot(smallData, aes(x=INJURIES,y=FATALITIES))+geom_point(shape=1)+geom_smooth(method=lm)
ggplot(smallData, aes(x=INJURIES,y=FATALITIES))+geom_point(shape=1)+geom_smooth()
ggplot(smallData, aes(x=INJURIES,y=FATALITIES))+geom_point(shape=1)+geom_smooth()+scale_y_continuous()
ggplot(smallData, aes(x=INJURIES,y=FATALITIES))+geom_point(shape=1)+geom_smooth()+scale_y_continuous(limits = c(0,100))
ggplot(smallData, aes(x=INJURIES,y=FATALITIES))+geom_point(shape=1)+geom_smooth()+scale_y_continuous(limits = c(0,100)) + scale_x_continuous(limits = c(0,1000))
fatalities<-subset(smallData,FATALITIES >0 & INJURIES > 0)
ggplot(fatalities, aes(x=INJURIES,y=FATALITIES))+geom_point(shape=1)+geom_smooth()+scale_y_continuous(limits = c(0,100)) + scale_x_continuous(limits = c(0,1000))
ggplot(fatalities, aes(x=INJURIES,y=FATALITIES, color=category))+geom_point(shape=1)+geom_smooth()+scale_y_continuous(limits = c(0,100)) + scale_x_continuous(limits = c(0,1000))
ggplot(fatalities, aes(x=PROPDMG,y=CROPDMG, color=category))+geom_point(shape=1)+geom_smooth()+scale_y_continuous(limits = c(0,100)) + scale_x_continuous(limits = c(0,1000))
ggplot(fatalities, aes(x=PROPDMG,y=CROPDMG, color=category))+geom_point(shape=1)+geom_smooth()
ggplot(fatalities, aes(x=EVTYPE,y=CROPDMG, color=category))+geom_point(shape=1)+geom_smooth()
ggplot(fatalities, aes(x=category,y=CROPDMG, color=category))+geom_point(shape=1)+geom_smooth()
ggplot(fatalities, aes(x=LATITUDE,y=CROPDMG, color=category))+geom_point(shape=1)+geom_smooth()
ggplot(fatalities, aes(x=propertydamage,y=CROPDMG, color=category))+geom_point(shape=1)+geom_smooth()
ggplot(fatalities, aes(x=PROPDMG,y=CROPDMG, color=category))+geom_point(shape=1)+geom_smooth()
ggplot(fatalities, aes(x=PROPDMG,y=CROPDMG,)+geom_point(shape=1)+geom_smooth()+facet_grid(~ . categoory)
ggplot(fatalities, aes(x=PROPDMG,y=CROPDMG,)+geom_point(shape=1)+geom_smooth()+facet_grid(~ . category)
x<-ggplot(fatalities, aes(x=PROPDMG,y=CROPDMG,)+geom_point(shape=1)+geom_smooth()
)
x<-ggplot(fatalities, aes(x=PROPDMG,y=CROPDMG,))+geom_point(shape=1)+geom_smooth()+facet_grid(~ . category)
x<-ggplot(fatalities, aes(x=PROPDMG,y=CROPDMG,))+geom_point(shape=1)+geom_smooth()
x + facet_grid(~.category)
x + facet_grid(category)
x + facet_grid(~ . category)
x + facet_grid(. ~ category)
x + facet_grid(. ~ category)+scale_y_continuous(limits=c(0,1000))
ggplot(smallData, aes(LONGITUDE, LATITUDE, colour = factor(cut(smallData$FATALITIES,
+     100, label = FALSE)))) + geom_point(size = 4) + geom_point(size = 4,
+     shape = 1, colour = "steelblue", alpha = 0.4) + labs(x = "Longitude",
+     y = "Latitude") + scale_colour_grey() + theme_bw() +
+     opts(legend.position = "none") + coord_equal()
ggplot(smallData, aes(LONGITUDE, LATITUDE, colour = factor(cut(smallData$FATALITIES,
+     100, label = FALSE)))) + geom_point(size = 4) + geom_point(size = 4,
+     shape = 1, colour = "steelblue", alpha = 0.4) + labs(x = "Longitude",
+     y = "Latitude") + scale_colour_grey() + theme_bw() +
+ coord_equal()
ggplot(smallData, aes(LONGITUDE, LATITUDE, colour = factor(cut(smallData$FATALITIES,
+     100, label = FALSE)))) + geom_point(size = 4) + geom_point(size = 4,
+     shape = 1, colour = "steelblue", alpha = 0.4) + labs(x = "Longitude",
+     y = "Latitude") + scale_colour_grey() + theme_bw()
ggplot(smallData, aes(LONGITUDE, LATITUDE, colour = factor(cut(smallData$FATALITIES,
+     100, label = FALSE)))) + geom_point(size = 4) + geom_point(size = 4,
+     shape = 1, colour = "steelblue", alpha = 0.4) +
scale_colour_grey() + theme_bw()
ggplot(smallData, aes(LONGITUDE, LATITUDE, colour = factor(cut(smallData$FATALITIES,
+     100, label = FALSE)))) + geom_point(size = 4)
ggplot(smallData, aes(LONGITUDE, LATITUDE, colour = factor(cut(smallData$FATALITIES, label = FALSE)))) + geom_point(size = 4)
ggplot(smallData, aes(LONGITUDE, LATITUDE, colour = factor(cut(smallData$FATALITIES,100, label = FALSE)))) + geom_point(size = 4) + geom_point(size = 4,shape = 1, colour = "steelblue", alpha = 0.4) + labs(x = "Longitude", y = "Latitude") + scale_colour_grey() + theme_bw()
ggplot(smallData, aes(LONGITUDE, LATITUDE, colour = factor(cut(smallData$FATALITIES,100, label = FALSE)))) + geom_point(size = 4) + geom_point(size = 4,shape = 1, colour = "steelblue", alpha = 0.4) + labs(x = "Longitude", y = "Latitude") + scale_colour_grey() + theme_bw()+facet_grid(~category)
pairs(~FATALITIES+INJURIES+PROPDMG+CROPDMG,data=smallData,
main="Simple Scatterplot Matrix for various variables")
library(maps)
install.packages('maps')
library(maps)
ggplot(smallData, aes(map_id = STATE))
smallData$Affected<-smallData$INJURIES+smallData$FATALITIES
states_map <- map_data("state")
ggplot(smallData, aes(map_id = STATE))+geom_map(aes(fill = Affected), map = states_map, colour='black')+expand_limits(x = states_map$long, y = states_map$lat)+ coord_map() + theme_bw()
install.packages('mapproj')
library(mapproj)
ggplot(smallData, aes(map_id = STATE))+geom_map(aes(fill = Affected), map = states_map, colour='black')+expand_limits(x = states_map$long, y = states_map$lat)+ coord_map() + theme_bw()
ggplot(smallData, aes(map_id = STATE))+geom_map(aes(fill = Affected), map = states_map, colour='black')
tmp <- merge(
data.table(STATE=sort(unique(smallData$STATE))),
dt[
list(
COUNT=sum(COUNT),
INJURIES=sum(INJURIES),
FATALITIES=sum(FATALITIES),
PROPDMG=round(sum(PROPDMG), 2),
CROPDMG=round(sum(CROPDMG), 2)
),
by=list(STATE)],
by=c('STATE'), all=TRUE
)
tmp[is.na(tmp)] <- 0
tmp <- merge(
+     data.table(STATE=sort(unique(smallData$STATE))),
+     dt[
+         list(
+             COUNT=sum(COUNT),
+             INJURIES=sum(INJURIES),
+             FATALITIES=sum(FATALITIES),
+             PROPDMG=round(sum(PROPDMG), 2),
+             CROPDMG=round(sum(CROPDMG), 2)
+         ),
+         by=list(STATE)],
+     by=c('STATE'), all=TRUE
+ )
tmp <- merge(
data.table(STATE=sort(unique(smallData$STATE))),
smallData[
list(
COUNT=sum(COUNT),
INJURIES=sum(INJURIES),
FATALITIES=sum(FATALITIES),
PROPDMG=round(sum(PROPDMG), 2),
CROPDMG=round(sum(CROPDMG), 2)
),
by=list(STATE)],
by=c('STATE'), all=TRUE
)
tmp <- merge(
smallData.table(STATE=sort(unique(smallData$STATE))),
smallData[
list(
COUNT=sum(COUNT),
INJURIES=sum(INJURIES),
FATALITIES=sum(FATALITIES),
PROPDMG=round(sum(PROPDMG), 2),
CROPDMG=round(sum(CROPDMG), 2)
),
by=list(STATE)],
by=c('STATE'), all=TRUE
)
p <- ggplot(smallData, aes(map_id = STATE))
p <- p + geom_map(aes(fill = Affected), map = states_map, colour='black') + expand_limits(x = states_map$long, y = states_map$lat)
print(p)
p + coord_map() + theme_bw()
p <- ggplot(smallData, aes(map_id = STATE))
p <- p + geom_map(aes(fill = Affected), map = states_map, colour='black')
print(p)
smallData$Affected
smallData[
list(
COUNT=sum(COUNT),
INJURIES=sum(INJURIES),
FATALITIES=sum(FATALITIES),
PROPDMG=round(sum(PROPDMG), 2),
CROPDMG=round(sum(CROPDMG), 2)
),
by=list(STATE)]
smallData[
list(
COUNT=sum(COUNT),
INJURIES=sum(INJURIES),
FATALITIES=sum(FATALITIES),
PROPDMG=round(sum(PROPDMG), 2),
CROPDMG=round(sum(CROPDMG), 2)
),
by=list(STATE)]
smallData[YEAR>=1950,
list(
COUNT=sum(COUNT),
INJURIES=sum(INJURIES),
FATALITIES=sum(FATALITIES),
PROPDMG=round(sum(PROPDMG), 2),
CROPDMG=round(sum(CROPDMG), 2)
),
by=list(STATE)]
library(data.table)
install.packages('data.table')
library(data.table)
tmp <- merge(
data.table(STATE=sort(unique(smallData$STATE))),
dt[
Affected>0,
list(
COUNT=sum(COUNT),
INJURIES=sum(INJURIES),
FATALITIES=sum(FATALITIES),
PROPDMG=round(sum(PROPDMG), 2),
CROPDMG=round(sum(CROPDMG), 2)
),
by=list(STATE)],
by=c('STATE'), all=TRUE
)
tmp <- merge(
data.table(STATE=sort(unique(smallData$STATE))),
smallData[
Affected>0,
list(
COUNT=sum(COUNT),
INJURIES=sum(INJURIES),
FATALITIES=sum(FATALITIES),
PROPDMG=round(sum(PROPDMG), 2),
CROPDMG=round(sum(CROPDMG), 2)
),
by=list(STATE)],
by=c('STATE'), all=TRUE
)
tmp <- merge(
data.table(STATE=sort(unique(smallData$STATE))),
smallData[
Affected>0,
list(
COUNT=sum(COUNT),
INJURIES=sum(INJURIES),
FATALITIES=sum(FATALITIES),
PROPDMG=round(sum(PROPDMG), 2),
CROPDMG=round(sum(CROPDMG), 2)
)],
by=c('STATE'), all=TRUE
)
tmp <- merge(
data.table(STATE=sort(unique(smallData$STATE))),
smallData[
Affected>0,
list(
INJURIES=sum(INJURIES),
FATALITIES=sum(FATALITIES),
PROPDMG=round(sum(PROPDMG), 2),
CROPDMG=round(sum(CROPDMG), 2)
)],
by=c('STATE'), all=TRUE
)
aggdata<-aggregate(smallData,by=list(STATE))
aggdata<-aggregate(smallData,by=list(STATE),FUN=sum)
aggdata<-aggregate(smallData,by=list(smallData$STATE),FUN=sum)
aggdata<-aggregate(smallData[,c('FATALITIES','INJURIES','PROPDMG','CROPDMG')],by=list(smallData$STATE),FUN=sum)
aggdata
colnames(aggdata)<-c("FATALITIES","INJURIES","PROPDMG","CROPDMG")
aggdata
colnames(aggdata)<-c("STATE",FATALITIES","INJURIES","PROPDMG","CROPDMG")
colnames(aggdata)<-c("STATE","FATALITIES","INJURIES","PROPDMG","CROPDMG")
aggdata
states_map <- map_data("state")
aggdata$Affected<-aggdata$FATALITIES+aggdata$INJURIES
p <- ggplot(aggdata, aes(map_id = STATE))
p + geom_map(aes(fill = Affected), map = states_map, colour='black') + expand_limits(x = states_map$long, y = states_map$lat)
print(p)
p <- ggplot(aggdata, aes(map_id = STATE))
p <- p + geom_map(aes(fill = Affected), map = states_map, colour='black') + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw()
p <- p + labs(x = "Long", y = "Lat", title = title)
print(p)
states_map
aggdata
aggdata$STATE
states_map_regions<-unique(states_map$region)
states_map_regions
data<-read.csv('events.agg.csv')
aggdata<-aggregate(data[,c('FATALITIES','INJURIES','PROPDMG','CROPDMG')],by=list(data$STATE),FUN=sum)
aggdata
aggdata$Affected = aggdata$FATALITIES+aggdata$INJURIES
p <- ggplot(aggdata, aes(map_id = STATE))
p <- p + geom_map(aes(fill = Affected), map = states_map, colour='black') + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw()
p <- p + labs(x = "Long", y = "Lat", title = title)
print(p)
colnames(aggdata)<-c("STATE","FATALITIES","INJURIES","PROPDMG","CROPDMG","Affected")
p <- ggplot(aggdata, aes(map_id = STATE))
p <- p + geom_map(aes(fill = Affected), map = states_map, colour='black') + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw()
p <- p + labs(x = "Long", y = "Lat", title = title)
print(p)
aggdata$STATE<-as.character(aggdata$STATE)
p <- ggplot(aggdata, aes(map_id = STATE))
p <- p + geom_map(aes(fill = Affected), map = states_map, colour='black') + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw()
print(p)
aggdata$Damages<-aggdata$CROPDMG+aggdata$PROPDMG
p <- ggplot(aggdata, aes(map_id = STATE))
p <- p + geom_map(aes(fill = Damages), map = states_map, colour='black') + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw()
print(p)
